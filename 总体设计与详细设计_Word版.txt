二、总体设计与详细设计

本章在需求分析的基础上，对系统的整体架构和关键功能模块进行深入的设计与阐述，并以API文档的形式对核心模块的功能进行说明。

1. 总体设计

1.1. 系统架构

本系统并非单一程序，而是一个由多个独立但相互协作的Python脚本组成的工具集。其总体架构可以自底向上分为三个主要层次：核心通信层、应用逻辑与状态共享层、用户表现层。

第一层：核心通信层。
这一层完全依赖第三方库`mcrcon`。它封装了底层的Socket网络通信和MCRcon协议的数据包构造与解析，为上层应用提供了简洁的接口，使得上层开发者无需关心复杂的网络协议细节。该层通过TCP/IP协议直接与Minecraft服务器进行交互。

第二层：应用逻辑与状态共享层。
这是连接底层通信与上层界面的桥梁。该层包含三个关键部分：
其一，自动化脚本（automation_*.py），作为系统的“守护进程”，通过多进程并发执行定时清理世界掉落物和持续监控玩家列表的核心任务。它最重要的职责是解析服务器的`list`命令，并将实时在线的玩家名单写入共享文件。
其二，服务器配置文件（config.toml），作为系统唯一的配置来源，存储服务器连接信息，实现了配置与代码的分离。
其三，共享状态文件（joined_players.txt），这是一个关键的设计。它由自动化脚本持续更新，并被上层的命令行和图形化工具读取，用于向管理员展示可操作的玩家列表。这种基于文件的状态共享机制，实现了不同工具间的松散耦合。

第三层：用户表现层。
这是用户直接与之交互的界面层。它提供了三种不同的工具：
一种是图形用户界面（Visualization.py），基于tkinter库构建，将复杂的命令操作封装成直观的按钮和输入框，极大地降低了使用门槛。
另两种是命令行交互界面（command.py 和 quickly_command.py），分别用于菜单式的功能选择和直接的原始命令输入。
这一层的所有工具都通过读取配置文件和共享的玩家列表文件来获取工作所需的数据。

1.2. 设计决策

多进程模型：在自动化脚本中采用`multiprocessing`而非多线程，主要是因为Python的全局解释器锁（GIL）限制了多线程在CPU密集型任务上的并行能力。使用多进程可以从根本上规避GIL带来的潜在问题，并确保各任务（如监控、清理、GUI）在独立的进程中运行，互不阻塞，提高了系统的稳定性和响应性。

GUI库选型：选择`tkinter`作为GUI库，因为它作为Python的标准库，无需额外安装，具有良好的跨平台性，且对于本项目中等复杂度的界面需求来说，功能足够、轻量便捷。

2. 详细设计 (重点功能模块API)

2.1. 自动化与状态共享模块 (automation_win.py / automation_linux.py)

该模块是整个工具集的“心跳”，负责后台的监控与维护，并为其他工具提供数据支持。

函数：monitor_players(rcon, messages, joined_players_filename)
功能描述：核心的玩家监控函数。它在一个无限循环中运行，每5秒执行一次以下操作：1. 通过RCON执行`list`命令获取原始玩家列表字符串。2. 使用正则表达式解析出包含玩家名的部分。3. 清理玩家名中包含的颜色代码。4. 与内存中和文件中的玩家列表进行比对，识别新加入和已离开的玩家。5. 当有新玩家加入时，调用`send_message`函数发送欢迎语。6. 将最新的完整玩家列表覆盖写入到指定的文件中。
参数说明：
rcon: 一个MCRcon实例。
messages: 一个包含欢迎语字符串的列表。
joined_players_filename: 共享的玩家列表文件名（如`joined_players.txt`）。

函数：clear_items(rcon, clear_interval)
功能描述：定时清理服务器掉落物。在一个无限循环中，每隔`clear_interval`秒，通过RCON执行`kill @e[type=item]`命令。
参数说明：
rcon: 一个MCRcon实例。
clear_interval: 清理间隔，单位为秒。

2.2. 命令行工具模块 (command.py)

该模块提供了一个功能丰富的菜单驱动型命令行界面，是图形化界面的非GUI版本。

模块主逻辑：程序启动时，加载配置和初始玩家列表，然后打印一个包含14个主要功能选项的菜单。程序进入一个循环，等待用户输入数字选项，并使用一个字典作为分发器，将用户输入映射到对应的处理函数来执行。

API函数列表：
- change_game_mode(rcon, joined_players): 切换指定玩家的游戏模式。
- teleport_player(rcon, joined_players): 传送玩家到指定坐标。
- give_item(rcon, joined_players): 给予玩家指定ID和数量的物品。
- kill_player(rcon, joined_players): 杀死指定玩家。
- ban_player(rcon, joined_players): 封禁指定玩家。
- unban_player(rcon, joined_players): 解封指定玩家。
- kick_player(rcon, joined_players): 将指定玩家踢出服务器。
- 其他如天气、时间、难度、白名单等管理函数，逻辑类似。

2.3. 图形化界面模块 (Visualization.py)

该模块通过`tkinter`将所有核心管理功能图形化，提供了最直观的操作体验。

UI结构设计：程序使用`tk.LabelFrame`控件，将功能相近的操作（如“切换游戏模式”、“传送玩家”等）组织在各自的区块内，使得界面布局清晰。对于玩家选择，统一使用`ttk.Combobox`下拉列表框，其数据源在程序启动时从`joined_players.txt`文件加载，实现了与自动化模块的数据联动。

事件与数据处理：程序大量使用`tk.StringVar`等变量类，将UI控件的当前值与后台变量绑定。每个功能区块的执行按钮都通过`command`参数绑定到一个具体的处理函数。每个处理函数在执行完RCON命令后，都会调用`messagebox.showinfo`弹出一个信息框，向用户确认操作结果，提供了及时的交互反馈。

核心依赖：该模块的易用性高度依赖于自动化脚本的正常运行。如果自动化脚本未运行，`joined_players.txt`文件将不会被更新，导致GUI中的玩家选择列表为空或过时，这是设计上的一个重要权衡。